name: Run Tests, Build & Push

# masterへのpushとPRで発火。
# 現在は本番環境しか無いのでmasterへのpush時に追加でデプロイ
on:
  push:
    branches:
      - master
  pull_request:
    types:
      - ready_for_review
      - reopened
      - synchronized

jobs:
  build:
    name: Build and Push
    runs-on: ubuntu-16.04
    steps:
      - name: Checkout GitHub Actions
        uses: actions/checkout@v2

      # Ref: https://github.com/aws-actions/amazon-ecs-deploy-task-definition
      #- name: Configure AWS credentials
      #  uses: aws-actions/configure-aws-credentials@v1
      #  with:
      #    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    aws-region: us-east-1

      #- name: Login to Amazon ECR
      #  id: login-ecr
      #  uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: kter/blockshare
          tag_with_ref: true
          tag_with_sha: true

      #- name: Build, tag, and push image to Amazon ECR
      #  id: build-image
      #  env:
      #    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #    ECR_REPOSITORY: blockshare
      #    IMAGE_TAG: ${{ github.sha }}
      #  run: |
      #    docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #    docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
      #    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #    docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      #    echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      #- name: Fill in the new image ID in the Amazon ECS task definition
      #  id: task-def
      #  uses: aws-actions/amazon-ecs-render-task-definition@v1
      #  with:
      #    task-definition: task-definition.json
      #    container-name: app
      #    image: ${{ steps.build-image.outputs.image }}

      #- name: Deploy Amazon ECS task definition
      #  uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #  with:
      #    task-definition: ${{ steps.task-def.outputs.task-definition }}
      #    service: web
      #    cluster: blockshare
      #    wait-for-service-stability: true
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-16.04
    if: github.ref == 'refs/heads/master'
    needs: [build]
    steps:
      - uses: actions/checkout@master
      - name: deploy to cluster
        uses: steebchen/kubectl@master
        env:
          # cat $HOME/.kube/config | base64
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: set image --record deployment/blockshare container=${{ github.repository }}:${{ github.sha }}
      - name: verify deployment
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          KUBECTL_VERSION: "1.15"
        with:
          args: '"rollout status deployment/blockshare"'


